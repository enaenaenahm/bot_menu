"""
Telegram –ë–æ—Ç: –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä —Ä–∞—Ü–∏–æ–Ω–∞ "–õ–æ–∂–∫–∞_–±–æ—Ç"
–ê–≤—Ç–æ—Ä: Enzhe Akhmetova
GitHub: https://github.com/enaenaenahm
–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è: 2025
"""
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
import re
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

NAME_REGEX = re.compile(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]+$')

logging.basicConfig(level=logging.INFO)
API_TOKEN = "7669..."

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Registration(StatesGroup):
    name = State()
    phone = State()
    confirm = State()

users_db = {}
recipes_db = {
    "–∑–∞–≤—Ç—Ä–∞–∫": ["–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏", "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏", "–ì—Ä–µ—á–∫–∞ —Å –º–æ–ª–æ–∫–æ–º"],
    "–æ–±–µ–¥": ["–ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º", "–°—É–ø", "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç"],
    "—É–∂–∏–Ω": ["–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏", "–¢–≤–æ—Ä–æ–≥", "–ö—É—Ä–∏—Ü–∞-–≥—Ä–∏–ª—å"],
    "–ø–µ—Ä–µ–∫—É—Å": ["–Ø–±–ª–æ–∫–æ", "–ô–æ–≥—É—Ä—Ç", "–û—Ä–µ—Ö–∏"]
}

def main_kb(user_id: int):
    if user_id in users_db:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–†–∞—Ü–∏–æ–Ω üçΩ"), KeyboardButton(text="–£—Å–ª—É–≥–∏ üíº")],
                [KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üì©")]
            ],
            resize_keyboard=True
        )
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
        resize_keyboard=True
    )

def services_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ üîì"), KeyboardButton(text="–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ üë®‚Äçüç≥")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def diet_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞–∫"), KeyboardButton(text="–û–±–µ–¥")],
            [KeyboardButton(text="–£–∂–∏–Ω"), KeyboardButton(text="–ü–µ—Ä–µ–∫—É—Å")],
            [KeyboardButton(text="–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å"), KeyboardButton(text="–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
        reply_markup=main_kb(message.from_user.id)
    )

@dp.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Registration.name)

@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    if not NAME_REGEX.fullmatch(message.text):
        await message.answer("‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ/–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return 
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Registration.phone)

@dp.message(Registration.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = ''.join(filter(str.isdigit, message.text))
    if len(phone) not in (10, 11) or not phone.isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä!\n–ü—Ä–∏–º–µ—Ä: 79876543210\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(phone=phone)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö (–î–∞/–ù–µ—Ç):")
    await state.set_state(Registration.confirm)

@dp.message(Registration.confirm)
async def process_confirm(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        users_db[user_id] = data
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=main_kb(user_id)
        )
    else:
        await message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=main_kb(user_id)
        )
    await state.clear()

@dp.message(F.text == "–£—Å–ª—É–≥–∏ üíº")
async def services_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_kb())

@dp.message(F.text == "–†–∞—Ü–∏–æ–Ω üçΩ")
async def diet_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=diet_kb())

@dp.message(F.text.in_({"–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω", "–ü–µ—Ä–µ–∫—É—Å"}))
async def random_recipe(message: types.Message):
    meal_type = message.text.lower()
    recipe = random.choice(recipes_db[meal_type])
    await message.answer(f"üç¥ {message.text}: {recipe}")

@dp.message(F.text == "–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å")
async def daily_menu(message: types.Message):
    menu = []
    for meal in ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–ø–µ—Ä–µ–∫—É—Å"]:
        recipe = random.choice(recipes_db[meal])
        menu.append(f"‚Ä¢ {meal.capitalize()}: {recipe}")
    await message.answer("\n".join(menu))

@dp.message(F.text == "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def weekly_menu(message: types.Message):
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    weekly_meals = []
    for day in days:
        daily = [random.choice(recipes_db[meal]) for meal in recipes_db]
        weekly_meals.append(f"{day}: " + ", ".join(daily))
    await message.answer("\n".join(weekly_meals))

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb(message.from_user.id))

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())